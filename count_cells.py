#!/usr/bin/env python

import sys
import pysam
import random

__doc__ = """Count the number of cells in a 10X BAM file."""

class CellCounter(object):
    infile = ""
    outfile = "/dev/stdout"
    mincount = 100                # Mimimum reported count
    maxreads = 0                  # Number of reads to be examined (0 = all)
    prob = 1.0                    # Probability of examining this read
    step = 0                      # If non-0, enable step mode
    nreads = 0                    # Reads seen so far
    counts = {}

    def parseArgs(self, args):
        if "-h"  in args or "--help" in args:
            self.usage()
            return False
        prev = ""
        for a in args:
            if prev == "-r":
                self.maxreads = int(a)
                prev = ""
            elif prev == "-p":
                self.prob = float(a)
                prev = ""
            elif prev == "-m":
                self.mincount = int(a)
                prev = ""
            elif prev == "-s":
                self.step = int(a)
                prev = ""
            elif prev == "-o":
                self.outfile = a
                prev = ""
            elif a in ["-r", "-p", "-m", "-s", "-o"]:
                prev = a
            else:
                self.infile = a

        if self.infile:
            return True
        else:
            self.usage()
            return False

    def usage(self):
        sys.stdout.write("""count_cells.py - Analyze number of cells in 10X experiments

Usage: count_cells.py [options] bamfile

This script reads a BAM file generated by cellranger and provides information on 
the number of cells identified in it. The program can either read the whole BAM
file (therefore providing the exact number) or subsample it for speed. A cell is 
counted if its barcode appears more than M times in the BAM file (default: 100).

Options:

  -m M | Minimum number of observations for each cell (default: {})
  -r R | Examine at most R records from BAM file (default: all records)
  -s S | Print number of cells every S records (default: no printing)
  -p P | Examine each record with probability P (default: {})

For example:

  count_cells.py -r 10000 -p 0.5

will examine roughly every other record, up to a total of 10,000.
""".format(self.mincount, self.prob))


    def readBAM(self, out):
        bamfile = pysam.AlignmentFile(self.infile, "rb")
        for read in bamfile.fetch():
            try:
                cb = read.get_tag("CB")
            except KeyError:
                continue        # ignore reads without a valid CB
            if random.random() > self.prob:
                continue        # 
            if cb in self.counts:
                self.counts[cb] += 1
            else:
                self.counts[cb] = 1
            self.nreads += 1
            if self.step and (self.nreads % self.step) == 0:
                self.report(out, verbose=False)
            if self.nreads == self.maxreads:
                return

    def report(self, out, verbose=True):
        n = 0
        sumreads = 0
        for c in self.counts.values():
            if c >= self.mincount:
                n += 1
                sumreads += c
        if verbose:
            sys.stderr.write("{} reads examined\n".format(self.nreads))
            sys.stderr.write("{} cell barcodes appear more than {} times.\n".format(n, self.mincount))
        if n:
            out.write("{}\t{}\t{:.2f}\t{:.2f}\n".format(self.nreads, n, 1.0*self.nreads/n, 100.0*sumreads/self.nreads))
        else:
            out.write("{}\t{}\t{:.2f}\t{:.2f}\n".format(self.nreads, n, 0.0, 100.0*sumreads/self.nreads))
            

if __name__ == "__main__":
    C = CellCounter()
    if C.parseArgs(sys.argv[1:]):
        with open(C.outfile, "w") as out:
            out.write("#Reads\tCells\tReads/cell\tReads%\n")
            C.readBAM(out)
            C.report(out)
